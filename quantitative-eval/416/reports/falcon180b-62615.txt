
    vuln-fix: Concurrent Access to Shared Resource (CWE-362) in falcon180b-62615 (severity: High)
    what: The code does not properly manage concurrent access to the shared `clients` array and `num_clients` variable, which can result in race conditions. 
    where: Lines involving access to `clients` array and `num_clients` variable in the file falcon180b-62615:
    - Line 42: `clients[num_clients] = client_socket;`
    - Line 43: `num_clients++;`
    why: If an attacker exploits this race condition, they could cause the server to mismanage client connections, leading to potential crashes, denial of service, or improper handling of client data.
    how: An attacker can exploit this vulnerability by initiating multiple simultaneous client connections, causing the server to improperly update the `clients` array and the `num_clients` variable concurrently.
    code-sources: Entry point for user input is the `accept` function in the `main` function.
    // Accepting incoming connections: `int client_socket = accept(server_socket, NULL, NULL);`
    code-sinks: Actions performed with user input:
    - Line 42: `clients[num_clients] = client_socket;`
    - Line 43: `num_clients++;`
    suggested-fix: 
    ```
    --- falcon180b-62615.c
    +++ falcon180b-62615-fixed.c
    @@ -22,6 +22,7 @@
     #define MAX_CLIENTS 10
     #define SERVER_PORT 8080
     #define BUFFER_SIZE 1024
    
    +pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;
     int clients[MAX_CLIENTS];
     int num_clients = 0;
    
    @@ -39,7 +40,7 @@
            continue;
        }
    
    +    pthread_mutex_lock(&clients_mutex);
        clients[num_clients] = client_socket;
        num_clients++;
    +    pthread_mutex_unlock(&clients_mutex);
    
        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, (void *) &client_socket);
    @@ -62,9 +63,11 @@
    
        close(client_socket);
    +    pthread_mutex_lock(&clients_mutex);
        // Remove client from list
        for (int i = 0; i < num_clients; i++) {
            if (clients[i] == client_socket) {
                clients[i] = clients[num_clients - 1];
                num_clients--;
                break;
            }
        }
    +    pthread_mutex_unlock(&clients_mutex);
        return NULL;
     }
    ```
    explanation-suggested-fix: The suggested fix introduces a mutex (`clients_mutex`) to manage concurrent access to the `clients` array and `num_clients` variable. The mutex is locked before accessing or modifying these shared resources and unlocked immediately after to prevent race conditions and ensure data consistency.
    method: UNKNOWN
