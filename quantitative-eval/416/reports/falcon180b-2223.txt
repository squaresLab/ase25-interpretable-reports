
vuln-fix: CWE-362: Race Condition in falcon180b-2223 (severity: High)
what: The code contains a race condition due to the non-atomic manipulation of `num_clients` and the `clients` array when a new client is added.
where: Lines 60-70 in `falcon180b-2223`
why: If not resolved, this race condition could allow multiple threads to manipulate the `num_clients` and `clients` array simultaneously, resulting in memory corruption, crashes, or arbitrary code execution.
how: An attacker could exploit this vulnerability by sending multiple connection requests in quick succession, causing unpredictable behavior and possibly gaining control over the application.
code-sources: The client connections accepted via the `accept` call in the main function.
code-sinks: Manipulation of the `num_clients` and `clients` array in the main function and data reception/sending in the `handle_client` function.
suggested-fix:
```diff
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>

#define MAX_CLIENTS 10
#define PORT 8080
#define BACKLOG 10

int clients[MAX_CLIENTS];
int num_clients = 0;
pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;

void *handle_client(void *arg) {
    int client_socket = *(int *) arg;
    char buffer[1024];

    while (1) {
        memset(buffer, 0, sizeof(buffer));
        int bytes_received = recv(client_socket, buffer, sizeof(buffer), 0);

        if (bytes_received <= 0) {
            break;
        }

        printf("Client %d sent: %s\n", client_socket, buffer);

        pthread_mutex_lock(&clients_mutex);
        for (int i = 0; i < num_clients; i++) {
            if (clients[i]!= client_socket) {
                send(clients[i], buffer, bytes_received, 0);
            }
        }
        pthread_mutex_unlock(&clients_mutex);
    }

    close(client_socket);
    pthread_mutex_lock(&clients_mutex);
    // Remove client from clients array
    for (int i = 0; i < num_clients; i++) {
        if (clients[i] == client_socket) {
            clients[i] = clients[num_clients - 1];
            num_clients--;
            break;
        }
    }
    pthread_mutex_unlock(&clients_mutex);
    pthread_exit(NULL);
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
   
    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr));
    listen(server_socket, BACKLOG);

    printf("Server started on port %d\n", PORT);

    while (1) {
        int client_socket = accept(server_socket, NULL, NULL);

        if (num_clients >= MAX_CLIENTS) {
            close(client_socket);
            continue;
        }

        pthread_mutex_lock(&clients_mutex);
        clients[num_clients] = client_socket;
        num_clients++;
        pthread_mutex_unlock(&clients_mutex);

        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, (void *) &client_socket);
    }

    return 0;
}
```
explanation-suggested-fix: The code diff introduces a mutex lock around the critical sections where `num_clients` and the `clients` array are accessed and modified. This ensures that only one thread can access these critical sections at a time, preventing race conditions.
method: UNKNOWN
