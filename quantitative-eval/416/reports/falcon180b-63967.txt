
vuln-fix: CWE-787: Out-of-bounds Write in falcon180b-63967 (severity: HIGH)
what: An out-of-bounds write error can occur when the `clients` array is accessed and modified without checking if the number of clients (`num_clients`) exceeds `MAX_CLIENTS`.
where: The vulnerability is located in the `main` function around the lines where `num_clients` is incremented and the `clients` array is modified:
```c
clients[num_clients++] = client_socket;
```
why: If this issue is not resolved, it can lead to memory corruption, which may cause crashes or arbitrary code execution, posing a severe security risk.
how: An attacker could exploit this vulnerability by connecting more than the allowed number of clients, which would cause the server to write past the bounds of the `clients` array, leading to potential memory corruption and exploitation.
code-sources: 
- `client_socket` in the `main` function from the `accept` call.
- `buffer` in the `handle_client` function from the `recv` call.
code-sinks: 
- `send` in the `broadcast` function.
- `send` in the `handle_client` function inside the for-loop.
suggested-fix: 
```diff
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <pthread.h>

#define PORT 8080
#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

int clients[MAX_CLIENTS];
int num_clients = 0;

void *handle_client(void *client_socket) {
    int client_socket_copy = *((int *) client_socket);
    char buffer[BUFFER_SIZE];
    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = recv(client_socket_copy, buffer, BUFFER_SIZE, 0);
        if (bytes_received <= 0) {
            close(client_socket_copy);
            pthread_exit(NULL);
        }
        for (int i = 0; i < num_clients; i++) {
            if (clients[i]!= client_socket_copy) {
                send(clients[i], buffer, bytes_received, 0);
            }
        }
    }
}

void broadcast(int sender_socket, char message[]) {
    for (int i = 0; i < num_clients; i++) {
        if (clients[i]!= sender_socket) {
            send(clients[i], message, strlen(message), 0);
        }
    }
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        printf("Error creating socket\n");
        return 1;
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr)) == -1) {
        printf("Error binding socket\n");
        return 1;
    }

    if (listen(server_socket, MAX_CLIENTS) == -1) {
        printf("Error listening on socket\n");
        return 1;
    }

    printf("Server started on port %d\n", PORT);

    while (1) {
        int client_socket = accept(server_socket, NULL, NULL);
        if (client_socket == -1) {
            printf("Error accepting connection\n");
            continue;
        }
        printf("Client connected, socket fd is %d\n", client_socket);

        if (num_clients >= MAX_CLIENTS) {
            printf("Max clients reached. Rejecting client socket fd %d\n", client_socket);
            close(client_socket);
            continue;
        }

        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, (void *) &client_socket);
        clients[num_clients++] = client_socket;
    }

    return 0;
}
```
explanation-suggested-fix: The suggested fix adds a check to ensure that the `num_clients` does not exceed `MAX_CLIENTS`. If this limit is reached, the new client connection is closed and a message is printed. This prevents the `clients` array from being accessed out of bounds, thereby mitigating the risk of memory corruption and ensuring stable program execution.
method: UNKNOWN
