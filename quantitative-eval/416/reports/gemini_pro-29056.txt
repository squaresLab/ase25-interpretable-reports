
vuln-fix: CWE-787: Out-of-bounds Write in gemini_pro-29056 (severity: High)
what: The vulnerability is an out-of-bounds write issue which occurs within the `handle_client` function due to the buffer size being strictly 1024 bytes. The function `recv` is used to read data into this buffer from a network socket, but it does not restrict the amount of data being read, potentially leading to an out-of-bounds write if more than 1024 bytes are received.
where: The vulnerability is located in `handle_client` function, specifically in lines related to:
  ```c
  char buffer[1024];
  int bytes_received = recv(client_socket, buffer, sizeof(buffer), 0);
  ```
why: If this weakness is not resolved, an attacker can exploit it by sending more than 1024 bytes of data to the server, causing a buffer overflow. This can lead to crashes, data corruption, or potentially allow for execution of arbitrary code.
how: An attacker would proceed to exploit this vulnerability by sending a specially crafted packet of more than 1024 bytes to the server, which would overflow the buffer in `handle_client`, potentially leading to arbitrary code execution or a Denial of Service (DoS).
code-sources: Entry point for user input is through the network socket from which data is read using `recv`.
code-sinks: Actions performed on user input include storing the data in `buffer` and using it to compute `checksum`. Furthermore, the data is echoed back to the client.
suggested-fix:
```diff
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>

#define PORT 5000
#define MAX_CLIENTS 10

int client_sockets[MAX_CLIENTS];
int client_count = 0;

void *handle_client(void *arg) {
  int client_socket = *(int *)arg;
  char buffer[1024];
  while (1) {
    memset(buffer, 0, sizeof(buffer));
+   int max_bytes_to_receive = sizeof(buffer) - 1; // Ensure space for null-terminator
    int bytes_received = recv(client_socket, buffer, max_bytes_to_receive, 0);
    if (bytes_received <= 0) {
      printf("Client disconnected\n");
      close(client_socket);
      break;
    }
    buffer[bytes_received] = '\0'; // Null-terminate the buffer to ensure safety
    int checksum = 0;
    for (int i = 0; i < bytes_received; i++) {
      checksum += buffer[i];
    }
    printf("Checksum: %d\n", checksum);
    send(client_socket, &checksum, sizeof(checksum), 0);
  }
  return NULL;
}

int main() {
  int server_socket = socket(AF_INET, SOCK_STREAM, 0);
  if (server_socket < 0) {
    perror("socket");
    exit(1);
  }
  struct sockaddr_in server_address;
  memset(&server_address, 0, sizeof(server_address));
  server_address.sin_family = AF_INET;
  server_address.sin_port = htons(PORT);
  server_address.sin_addr.s_addr = INADDR_ANY;
  if (bind(server_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
    perror("bind");
    exit(1);
  }
  if (listen(server_socket, MAX_CLIENTS) < 0) {
    perror("listen");
    exit(1);
  }
  while (1) {
    int client_socket = accept(server_socket, NULL, NULL);
    if (client_socket < 0) {
      perror("accept");
      continue;
    }
    if (client_count >= MAX_CLIENTS) {
      close(client_socket);
      continue;
    }
    client_sockets[client_count] = client_socket;
    client_count++;
    pthread_t thread;
    pthread_create(&thread, NULL, handle_client, &client_socket);
  }
  return 0;
}
```
explanation-suggested-fix: The fix ensures that `recv` only reads up to `sizeof(buffer) - 1` bytes to leave space for a null-terminator. After receiving data, the buffer is explicitly null-terminated to prevent any overflow. This prevents out-of-bounds writes by enforcing a limit on the amount of data read into the buffer.
method: CODEQL
