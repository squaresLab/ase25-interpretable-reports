
vuln-fix: CWE-362: Race Condition in falcon180b-55238 (severity: High)
what: The code has a race condition vulnerability due to the non-atomic handling of `clientCount` and updating of the `clients` array.
where: 
    - Line where `clientCount` is incremented: 
    ``` 
    clientCount++; 
    ```
    - Line where new client's socket is added to the `clients` array: 
    ``` 
    clients[clientCount - 1] = clientSocket;
    ```
why: If unresolved, multiple threads could simultaneously modify `clientCount` and `clients` array, leading to undefined behavior, crashes, and potential data corruption.
how: An attacker could potentially create multiple simultaneous connections, causing the race condition to manifest. This could lead to overwriting entries in the `clients` array and confusing the serverâ€™s state, potentially allowing an attacker to disrupt service or execute arbitrary code.
code-sources: 
    - User connections initiated via the `accept` function:
    ``` 
    int clientSocket = accept(serverSocket, NULL, NULL);
    ```

code-sinks: 
    - Incrementing `clientCount` and updating `clients` array:
    ```
    clientCount++;
    clients[clientCount - 1] = clientSocket;
    ```

suggested-fix: 
```diff
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <pthread.h>

#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

int clients[MAX_CLIENTS];
int clientCount = 0;
pthread_mutex_t clientListMutex = PTHREAD_MUTEX_INITIALIZER;

void *listenToClient(void *socket) {
    char buffer[BUFFER_SIZE];
    int clientSocket = *(int *)socket;

    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytesReceived = recv(clientSocket, buffer, BUFFER_SIZE, 0);

        if (bytesReceived <= 0) {
            close(clientSocket);
            pthread_exit(0);
        }

        printf("Received message from client %d: %s\n", clientSocket, buffer);
    }
}

int main() {
    int serverSocket = socket(AF_INET, SOCK_STREAM, 0);

    struct sockaddr_in serverAddr;
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(8080);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    bind(serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr));
    listen(serverSocket, 10);

    printf("Server started on port 8080\n");

    while (1) {
        int clientSocket = accept(serverSocket, NULL, NULL);

        if (clientSocket == -1) {
            printf("Error accepting connection\n");
            continue;
        }

        pthread_mutex_lock(&clientListMutex);
        clientCount++;
        clients[clientCount - 1] = clientSocket;
        pthread_mutex_unlock(&clientListMutex);

        pthread_t threadID;
        pthread_create(&threadID, NULL, listenToClient, (void *)&clientSocket);
    }

    return 0;
}
```

explanation-suggested-fix: The suggested code introduces a mutex `clientListMutex` to provide thread-safe access to the shared variables `clientCount` and `clients` array. By locking the mutex before modifying these variables and unlocking it afterward, we ensure that only one thread can access and modify them at a time, thus preventing race conditions.
method: UNKNOWN
