   
vuln-fix: CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') in falcon180b-64471 (severity: High)
what: The code allows multiple threads to access and modify the `client_sockets` array and `num_clients` variable without proper synchronization.
where: Lines 13 and 17 in `falcon180b-64471` where `client_sockets` and `num_clients` are accessed.
why: Failure to resolve this weakness can lead to data corruption, crashes, or undefined behavior due to race conditions.
how: An attacker could exploit this vulnerability by creating multiple concurrent connections, potentially resulting in inconsistent states or overwriting critical data.
code-sources: The entry points are the client connections accepted in the `main` function, particularly around the `accept` function.
code-sinks: The vulnerable operations occur at the access and modification of `client_sockets` and `num_clients` in the `main` function and the `handle_client` thread function.
suggested-fix: 
```diff
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <pthread.h>

#define PORT 110
#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

int client_sockets[MAX_CLIENTS];
int num_clients = 0;
pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;

void *handle_client(void *arg) {
    int client_socket = *(int *) arg;
    char buffer[BUFFER_SIZE];

    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);

        if (bytes_received <= 0) {
            break;
        }

        printf("Client %d sent: %s\n", client_socket, buffer);
        
        pthread_mutex_lock(&clients_mutex);
        for (int i = 0; i < num_clients; i++) {
            if (i != client_socket) {
                send(client_sockets[i], buffer, bytes_received, 0);
            }
        }
        pthread_mutex_unlock(&clients_mutex);
    }

    close(client_socket);
    printf("Client %d disconnected\n", client_socket);
    
    pthread_exit(NULL);
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr));
    listen(server_socket, MAX_CLIENTS);

    printf("Server started on port %d\n", PORT);

    while (1) {
        int client_socket = accept(server_socket, NULL, NULL);

        pthread_mutex_lock(&clients_mutex);
        if (num_clients >= MAX_CLIENTS) {
            send(client_socket, "Server is full\n", 16, 0);
            close(client_socket);
            pthread_mutex_unlock(&clients_mutex);
            continue;
        }

        client_sockets[num_clients] = client_socket;
        num_clients++;

        pthread_mutex_unlock(&clients_mutex);

        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, (void *) &client_socket);
        pthread_detach(thread_id);
    }
    
    pthread_mutex_destroy(&clients_mutex);
    return 0;
}
```
explanation-suggested-fix: The suggested code diff adds a `pthread_mutex_t` named `clients_mutex` to protect critical sections where the `client_sockets` array and `num_clients` variable are accessed and modified. This ensures synchronization, preventing race conditions by making sure only one thread can access these resources at a time.
method: CODEQL if there is any taint information; say UNKNOWN otherwise
