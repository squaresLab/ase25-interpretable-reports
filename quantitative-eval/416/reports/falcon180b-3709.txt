
vuln-fix: Buffer Overflow (CWE-120) in falcon180b-3709 (severity: High)
what: The buffer used to store incoming client data (`buffer` in `handle_client` function) can be overflowed if the received data (`buffer` in `handle_client` function) exceeds its size, as it directly uses the length of `buffer` to send to other clients.
where: Lines 14-27 in falcon180b-3709
why: If the buffer overflow is not resolved, it could lead to various critical issues, including crashing of the server, data corruption, or potential code execution by an attacker.
how: An attacker could exploit this vulnerability by sending a crafted message larger than the buffer size, causing a buffer overflow and potentially overwriting adjacent memory, leading to arbitrary code execution or crashing the server.
code-sources: The `recv` function in the `handle_client` function (`buffer` in `handle_client` function) at lines 19-21.
code-sinks: The `send` function in the `handle_client` function (`buffer` in `handle_client` function) at line 25.
suggested-fix: 
```diff
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <pthread.h>

#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

int client_sockets[MAX_CLIENTS];
int num_clients = 0;

void *handle_client(void *arg) {
    int client_socket = *(int *) arg;
    char buffer[BUFFER_SIZE];

    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = recv(client_socket, buffer, BUFFER_SIZE-1, 0); // fix here

        if (bytes_received <= 0) {
            break;
        }

        buffer[bytes_received] = '\0'; // fix here to null-terminate after receiving

        printf("Client %d sent: %s\n", client_socket, buffer);
        for (int i = 0; i < num_clients; i++) {
            if (client_sockets[i] != client_socket) { // fix logic error by comparing against client_sockets[i]
                send(client_sockets[i], buffer, bytes_received, 0);
            }
        }
    }

    close(client_socket);

    pthread_exit(0);
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr));
    listen(server_socket, 3);

    printf("Server is listening on port 8080\n");

    while (1) {
        int client_socket = accept(server_socket, NULL, NULL);

        if (num_clients >= MAX_CLIENTS) {
            send(client_socket, "Server is full. Please try again later.\n", 45, 0);
            close(client_socket);
            continue;
        }

        client_sockets[num_clients] = client_socket;
        num_clients++;

        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, (void *) &client_socket);
    }

    return 0;
}
```
explanation-suggested-fix: The modifications ensure that the buffer is not overflowed by reducing the number of bytes received to `BUFFER_SIZE - 1` and explicitly null-terminating the buffer after receiving the data. Additionally, fixing a logical error in the comparison ensures that messages aren't sent back to the sender by comparing indices correctly.
method: UNKNOWN
