
vuln-fix: Buffer Overflow (CWE-120) in falcon180b-34302 (severity: High)
what: The vulnerability is a buffer overflow due to unsafe usage of the `recv` function in the `handle_client` function. The received data is not properly checked for size before being copied into the `buffer`, which is of fixed size (1024 bytes).
where: Lines 15-21 in the `handle_client` function, located in the file `falcon180b-34302`.
why: If the vulnerability is not resolved, an attacker could overflow the buffer, leading to potential denial of service, data corruption, or remote code execution.
how: An attacker would send especially crafted data larger than `BUFFER_SIZE` (1024 bytes) to the application. This would overflow the `buffer` and overwrite adjacent memory which could lead to arbitrary code execution.
code-sources: The entry point for user input is the `recv` function in the `handle_client` function.
code-sinks: The potentially dangerous action is the copying of data into the local `buffer` without checking its length.
suggested-fix:
```diff
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <pthread.h>
#define PORT 8080
#define BACKLOG 10
#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024
int clients[MAX_CLIENTS];
int num_clients = 0;
void *handle_client(void *client_socket) {
int client_socket_copy = *((int *) client_socket);
char buffer[BUFFER_SIZE];
while (1) {
memset(buffer, 0, BUFFER_SIZE);
- int bytes_received = recv(client_socket_copy, buffer, BUFFER_SIZE, 0);
+ int bytes_received = recv(client_socket_copy, buffer, BUFFER_SIZE - 1, 0);
if (bytes_received <= 0) {
close(client_socket_copy);
clients[--num_clients] = 0;
break;
}
+ buffer[BUFFER_SIZE - 1] = '\0'; // Ensure the buffer is null-terminated
printf("Client %d sent: %s\n", client_socket_copy, buffer);
send(client_socket_copy, buffer, strlen(buffer), 0);
}
return NULL;
}
int main(int argc, char **argv) {
int server_socket = socket(AF_INET, SOCK_STREAM, 0);
if (server_socket == -1) {
printf("Error creating socket\n");
return 1;
}
struct sockaddr_in server_addr;
memset(&server_addr, 0, sizeof(server_addr));
server_addr.sin_family = AF_INET;
server_addr.sin_port = htons(PORT);
server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
if (bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr)) == -1) {
printf("Error binding socket\n");
return 1;
}
if (listen(server_socket, BACKLOG) == -1) {
printf("Error listening\n");
return 1;
}
printf("Server started on port %d\n", PORT);
while (1) {
int client_socket = accept(server_socket, NULL, NULL);
if (client_socket == -1) {
printf("Error accepting connection\n");
continue;
}
if (num_clients == MAX_CLIENTS) {
close(client_socket);
printf("Maximum number of clients reached\n");
continue;
}
clients[num_clients] = client_socket;
num_clients++;
pthread_t thread_id;
pthread_create(&thread_id, NULL, handle_client, (void *) &client_socket);
}
return 0;
}
```
explanation-suggested-fix: The fix limits the amount of data received to `BUFFER_SIZE - 1` bytes to reserve space for the null terminator. Additionally, it explicitly null-terminates the buffer to prevent buffer overflow and ensure safe string operations.
method: UNKNOWN
