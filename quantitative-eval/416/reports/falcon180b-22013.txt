
vuln-fix: CWE-835: Loop with Unreachable Exit Condition in falcon180b-22013 at handle_client function (severity: High)
what: 
The vulnerability is an infinite loop in the `handle_client` function occurring because the loop `while(1)` does not have a proper termination condition, potentially leading to a denial-of-service (DoS).

where:
The vulnerability occurs in the `handle_client` function, specifically within the infinite loop `while(1)` in the file `falcon180b-22013`. The relevant lines are after the line:
```
while (1) {
    memset(buffer, 0, BUFFER_SIZE);
    int bytes_received = recv(sock, buffer, BUFFER_SIZE, 0);
```
The `while (1)` loop starts on line 18.
    
why:
If the vulnerability is not resolved, it could lead to a denial-of-service (DoS) attack. Clients could potentially remain connected indefinitely, consuming server resources and preventing new clients from connecting.

how:
An attacker could exploit this vulnerability by continuously sending data, with the server never closing the connection, thus holding the connection open indefinitely. This may cause resource exhaustion, leading to a DoS condition where legitimate users cannot access the service.

code-sources:
The entry point for user input is in the `recv` call within the `handle_client` function:
```
int bytes_received = recv(sock, buffer, BUFFER_SIZE, 0);
```
    
code-sinks:
The data received from the user through the source is processed and sent to other clients using the `send` function:
```
send(clients[i], buffer, strlen(buffer), 0);
```

suggested-fix:
```diff
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>

#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

int clients[MAX_CLIENTS];
int num_clients = 0;

void *handle_client(void *socket_desc) {
    int sock = *(int *) socket_desc;
    char buffer[BUFFER_SIZE];

    while (1) {
+       fd_set read_fds;
+       struct timeval timeout;
+       timeout.tv_sec = 5; // 5 seconds timeout
+       timeout.tv_usec = 0;
+
+       FD_ZERO(&read_fds);
+       FD_SET(sock, &read_fds);
+
+       int activity = select(sock + 1, &read_fds, NULL, NULL, &timeout);
+       if (activity < 0) {
+           break;
+       } else if (activity == 0) {
+           // Timeout condition
+           continue;
+       }
+
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = recv(sock, buffer, BUFFER_SIZE, 0);

        if (bytes_received <= 0) {
            break;
        }

        printf("Client %d sent: %s\n", sock, buffer);

        // Send message to all connected clients
        for (int i = 0; i < num_clients; i++) {
            if (clients[i]!= sock) {
                send(clients[i], buffer, strlen(buffer), 0);
            }
        }
    }

    close(sock);
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

    bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr));

    listen(server_socket, 3);

    while (1) {
        printf("Waiting for client connection...\n");
        int client_socket = accept(server_socket, NULL, NULL);

        if (num_clients >= MAX_CLIENTS) {
            send(client_socket, "Server is full. Please try again later.\n", 45, 0);
            close(client_socket);
            continue;
        }

        clients[num_clients] = client_socket;
        num_clients++;

        printf("Client %d connected.\n", client_socket);

        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, (void *) &client_socket);
    }

    return 0;
}
```

explanation-suggested-fix:
The suggested code introduces a `select` function with a timeout to handle potential timeouts or select interruptions. This helps break out of the infinite loop condition by providing a way for the server to stop waiting indefinitely for a client's data if they stop sending it without closing the connection. By including a timeout and using `select`, the server can periodically check for activity (data from client) and continue operation normally or break the loop if there is an error or timeout.

method:
UNKNOWN
