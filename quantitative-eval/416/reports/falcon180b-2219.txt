
vuln-fix: CWE-362: Race Condition in falcon180b-2219 (severity: High)
what: The vulnerability is a race condition due to the non-atomic update and check of `num_clients` and `clients` array, which can cause multiple threads to concurrently access and modify shared variables leading to inconsistent or unpredictable behavior.
where: Lines where `num_clients` and `clients` array are read or modified in falcon180b-2219.
why: Not resolving this weakness can allow attackers to exploit the race condition, potentially causing the server to crash, accept more clients than intended, or operate with incorrect state information.
how: An attacker could exploit this vulnerability by rapidly connecting and disconnecting to the server, causing multiple threads to access and update `num_clients` and `clients` concurrently, leading to corruption of these variables.
code-sources: `accept(server_socket, NULL, NULL)` provides the entry point for user connections.
code-sinks: `clients[num_clients] = client_socket;` and `num_clients++;` perform actions using user input, specifically adding client sockets to the clients array.
suggested-fix: 
```diff
#include <pthread.h>

#define PORT 8080
#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

int clients[MAX_CLIENTS];
int num_clients = 0;
pthread_mutex_t client_mutex = PTHREAD_MUTEX_INITIALIZER;

void *handle_client(void *client_socket) {
    char buffer[BUFFER_SIZE];
    int client_socket_copy = *((int *) client_socket);

    while(1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = recv(client_socket_copy, buffer, BUFFER_SIZE, 0);
        if(bytes_received <= 0) {
            break;
        }

        printf("Client %d sent: %s\n", client_socket_copy, buffer);

        pthread_mutex_lock(&client_mutex);
        for(int i = 0; i < num_clients; i++) {
            if(clients[i] != client_socket_copy) {
                send(clients[i], buffer, strlen(buffer), 0);
            }
        }
        pthread_mutex_unlock(&client_mutex);
    }

    close(client_socket_copy);
    return NULL;
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

    bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr));
    listen(server_socket, 3);

    printf("Server started on port %d\n", PORT);

    while(1) {
        int client_socket = accept(server_socket, NULL, NULL);
        if(client_socket == -1) {
            printf("Error accepting client\n");
            continue;
        }

        pthread_mutex_lock(&client_mutex);
        if(num_clients >= MAX_CLIENTS) {
            pthread_mutex_unlock(&client_mutex);
            send(client_socket, "Server full\n", 11, 0);
            close(client_socket);
            continue;
        }

        clients[num_clients] = client_socket;
        num_clients++;
        pthread_mutex_unlock(&client_mutex);

        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, (void *)&client_socket);
    }

    return 0;
}
```
explanation-suggested-fix: The proposed fix introduces a `pthread_mutex_t client_mutex` to protect access to `num_clients` and the `clients` array. By locking `client_mutex` before modifying or reading these shared variables, we ensure that only one thread can access them at a time, thus preventing race conditions.
method: UNKNOWN
