 
    
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    #include <sys/socket.h>
    #include <arpa/inet.h>
    #include <pthread.h>

    #define MAX_CLIENTS 10
    #define SERVER_PORT 8080

    int client_sockets[MAX_CLIENTS];
    int num_clients = 0;
    pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER; // Add a mutex for synchronization

    void *handle_client(void *arg) {
        int client_socket = *(int *) arg;
        char buffer[1024];

        while(1) {
            memset(buffer, 0, sizeof(buffer));
            int bytes_received = recv(client_socket, buffer, sizeof(buffer), 0);

            if(bytes_received <= 0) {
                pthread_mutex_lock(&clients_mutex);
                // Remove client socket from the list
                for(int i=0; i<num_clients; i++) {
                    if(client_sockets[i] == client_socket) {
                        client_sockets[i] = client_sockets[num_clients - 1];
                        num_clients--;
                        break;
                    }
                }
                pthread_mutex_unlock(&clients_mutex);
                close(client_socket);
                pthread_exit(NULL);
            }

            printf("Client %d sent message: %s\n", client_socket, buffer);
            pthread_mutex_lock(&clients_mutex);
            for(int i=0; i<num_clients; i++) {
                if(client_sockets[i] != client_socket) {
                    send(client_sockets[i], buffer, strlen(buffer), 0);
                }
            }
            pthread_mutex_unlock(&clients_mutex);
        }
    }

    int main() {
        int server_socket = socket(AF_INET, SOCK_STREAM, 0);
        struct sockaddr_in server_addr;

        memset(&server_addr, 0, sizeof(server_addr));
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(SERVER_PORT);
        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

        bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr));
        listen(server_socket, MAX_CLIENTS);

        printf("Server started on port %d\n", SERVER_PORT);

        while(1) {
            int client_socket = accept(server_socket, NULL, NULL);

            if(client_socket == -1) {
                printf("Error accepting client\n");
                continue;
            }

            pthread_mutex_lock(&clients_mutex);
            if(num_clients == MAX_CLIENTS) {
                pthread_mutex_unlock(&clients_mutex);
                close(client_socket);
                printf("Server is full\n");
                continue;
            }

            client_sockets[num_clients] = client_socket;
            num_clients++;
            pthread_mutex_unlock(&clients_mutex);

            pthread_t thread_id;
            pthread_create(&thread_id, NULL, handle_client, (void *) &client_socket);
        }

        return 0;
    }
    
    