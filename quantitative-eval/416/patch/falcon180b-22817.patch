

#include <pthread.h>
static pthread_mutex_t client_sockets_lock = PTHREAD_MUTEX_INITIALIZER;

void *handle_client(void *arg) {
    int client_socket = *(int *) arg;
    char buffer[MAX_DATA_SIZE];

    while (TRUE) {
        memset(buffer, 0, MAX_DATA_SIZE);
        int bytes_received = recv(client_socket, buffer, MAX_DATA_SIZE, 0);

        if (bytes_received <= 0) {
            close(client_socket);
            pthread_mutex_lock(&client_sockets_lock);
            client_socket = -1;
            pthread_mutex_unlock(&client_sockets_lock);
            break;
        }

        printf("Client %d sent: %s\n", client_socket, buffer);

        pthread_mutex_lock(&client_sockets_lock);
        for (int i = 0; i < num_clients; i++) {
            if (client_sockets[i]!= client_socket) {
                send(client_sockets[i], buffer, strlen(buffer), 0);
            }
        }
        pthread_mutex_unlock(&client_sockets_lock);
    }

    return NULL;
}

// After sanity checks but before using client_socket
pthread_mutex_lock(&client_sockets_lock);
client_sockets[num_clients] = client_socket;
num_clients++;
pthread_mutex_unlock(&client_sockets_lock);


