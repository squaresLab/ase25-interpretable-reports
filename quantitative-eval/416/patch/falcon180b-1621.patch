 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <pthread.h>

- #define MAX_CLIENTS 10
+#define MAX_CLIENTS 10
+#define MAX_THREADS 10
+#define MAX_MESSAGE_LENGTH 1024

int server_socket;
int client_sockets[MAX_CLIENTS];
int num_clients = 0;
+
+pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;

void *handle_client(void *socket_desc) {
+    pthread_detach(pthread_self());
    int sock = *(int *) socket_desc;
    char buffer[MAX_MESSAGE_LENGTH];

    while (1) {
        memset(buffer, 0, MAX_MESSAGE_LENGTH);
        int bytes_received = recv(sock, buffer, MAX_MESSAGE_LENGTH, 0);

        if (bytes_received <= 0) {
-            close(sock);
+            pthread_mutex_lock(&clients_mutex);
            for(int i = 0; i < num_clients; i++) {
                if(client_sockets[i] == sock) {
+                    client_sockets[i] = client_sockets[num_clients - 1];
+                    num_clients--;
+                    break;
                }
            }
+            pthread_mutex_unlock(&clients_mutex);
+            close(sock);
            printf("Client %d disconnected\n", sock);
            pthread_exit(NULL);
        }

        printf("Client %d sent message: %s\n", sock, buffer);
        for(int i = 0; i < num_clients; i++) {
            if(client_sockets[i] != sock) {
                send(client_sockets[i], buffer, bytes_received, 0);
            }
        }
    }
    return NULL;
}

int main() {
+    pthread_mutex_init(&clients_mutex, NULL);
    int opt = 1;
    setsockopt(server_socket, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(8080);

    bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr));
    listen(server_socket, 5);

    printf("Server is listening on port 8080\n");

    while (1) {
        struct sockaddr_in client_addr;
        socklen_t addr_size = sizeof(client_addr);
        int client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &addr_size);

        if (client_socket < 0) {
            printf("Error accepting connection\n");
            continue;
        }

        pthread_mutex_lock(&clients_mutex);
        if (num_clients >= MAX_CLIENTS) {
            printf("Maximum number of clients reached\n");
            close(client_socket);
            pthread_mutex_unlock(&clients_mutex);
            continue;
        }

        client_sockets[num_clients] = client_socket;
        num_clients++;
        pthread_mutex_unlock(&clients_mutex);

        pthread_t thread_id;
-        pthread_create(&thread_id, NULL, handle_client, (void *)&client_socket);
+        pthread_create(&thread_id, NULL, handle_client, (void *)&client_socket);
+        pthread_detach(thread_id);
    }
+
+    pthread_mutex_destroy(&clients_mutex);
    return 0;
}

