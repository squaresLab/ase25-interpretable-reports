 

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/time.h>
#include <pthread.h>

#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

int clients[MAX_CLIENTS];
int num_clients = 0;
int max_clients = MAX_CLIENTS;

pthread_mutex_t client_mutex = PTHREAD_MUTEX_INITIALIZER;

void* handle_client(void* arg) {
    int client_socket = *(int*)arg;
    char buffer[BUFFER_SIZE];

    // Detach the thread to allow it to clean up after itself
    pthread_detach(pthread_self());

    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);

        if (bytes_received <= 0) {
            break;
        }

        send(client_socket, buffer, bytes_received, 0);
    }

    close(client_socket);

    // Safely remove the client from the clients array
    pthread_mutex_lock(&client_mutex);
    for (int i = 0; i < num_clients; ++i) {
        if (clients[i] == client_socket) {
            clients[i] = clients[num_clients - 1];
            num_clients--;
            break;
        }
    }
    pthread_mutex_unlock(&client_mutex);

    free(arg);
    return NULL;
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);

    if (server_socket == -1) {
        printf("Error creating socket\n");
        return 1;
    }

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(12345);
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        printf("Error binding socket\n");
        return 1;
    }

    if (listen(server_socket, 10) == -1) {
        printf("Error listening on socket\n");
        return 1;
    }

    printf("Server started on port 12345\n");

    while (1) {
        struct sockaddr_in client_addr;
        memset(&client_addr, 0, sizeof(client_addr));

        socklen_t client_addr_size = sizeof(client_addr);
        int *client_socket = malloc(sizeof(int));
        *client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_addr_size);

        if (*client_socket == -1) {
            printf("Error accepting connection\n");
            free(client_socket);
            continue;
        }

        pthread_mutex_lock(&client_mutex);
        if (num_clients >= max_clients) {
            pthread_mutex_unlock(&client_mutex);
            send(*client_socket, "Server is full\n", strlen("Server is full\n"), 0);
            close(*client_socket);
            free(client_socket);
            continue;
        }

        clients[num_clients] = *client_socket;
        num_clients++;
        pthread_mutex_unlock(&client_mutex);

        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, (void*)client_socket);
    }

    return 0;
}

    