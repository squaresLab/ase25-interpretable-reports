 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <limits.h>
#include <unistd.h>

#define PORT 8080

void *handle_client(void *args)
{
    int sockfd = *(int *)args;
    char buffer[1024];
    char resolved_path[PATH_MAX];

    int n = read(sockfd, buffer, sizeof(buffer));
    if (n < 0)
    {
        perror("read");
        close(sockfd);
        pthread_exit(NULL);
    }

    char *method = strtok(buffer, " ");
    char *url = strtok(NULL, " ");
    if (!method || !url)
    {
        perror("strtok");
        close(sockfd);
        pthread_exit(NULL);
    }

    snprintf(resolved_path, sizeof(resolved_path), "./%s", url + 1);
    if (realpath(resolved_path, resolved_path) == NULL)
    {
        perror("realpath");
        close(sockfd);
        pthread_exit(NULL);
    }

    if (strncmp(resolved_path, "./", 2) != 0)
    {
        fprintf(stderr, "Attempted directory traversal detected.\n");
        close(sockfd);
        pthread_exit(NULL);
    }

    FILE *fp = fopen(resolved_path, "rb");
    if (!fp)
    {
        perror("fopen");
        close(sockfd);
        pthread_exit(NULL);
    }

    int bytes_sent;
    while ((bytes_sent = fread(buffer, 1, sizeof(buffer), fp)) > 0)
    {
        if (write(sockfd, buffer, bytes_sent) < 0)
        {
            perror("write");
            close(sockfd);
            fclose(fp);
            pthread_exit(NULL);
        }
    }

    close(sockfd);
    fclose(fp);

    pthread_exit(NULL);
}

int main()
{
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0)
    {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_port = htons(PORT);
    addr.sin_addr.s_addr = INADDR_ANY;
    if (bind(sockfd, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    if (listen(sockfd, 5) < 0)
    {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    while (1)
    {
        int clientfd = accept(sockfd, NULL, NULL);
        if (clientfd < 0)
        {
            perror("accept");
            continue;
        }

        pthread_t tid;
        if (pthread_create(&tid, NULL, handle_client, &clientfd) != 0)
        {
            perror("pthread_create");
            close(clientfd);
            continue;
        }

        pthread_detach(tid);
    }

    close(sockfd);

    return 0;
}

