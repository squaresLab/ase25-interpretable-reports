
    
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <unistd.h>
    #include <sys/socket.h>
    #include <arpa/inet.h>
    #include <netdb.h>
    #include <pthread.h>

    #define MAX_CLIENTS 10
    #define BUFFER_SIZE 1024

    int client_sockets[MAX_CLIENTS];
    int num_clients = 0;
    pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;

    void *handle_client(void *socket_desc) {
        int client_socket = *(int *) socket_desc;
        char buffer[BUFFER_SIZE];
        while(1) {
            memset(buffer, 0, BUFFER_SIZE);
            int bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);
            if(bytes_received <= 0) {
                break;
            }
            printf("Client %d sent: %s\n", client_socket, buffer);
            pthread_mutex_lock(&clients_mutex);
            for(int i = 0; i < num_clients; i++) {
                if(client_sockets[i] != client_socket) {
                    send(client_sockets[i], buffer, strlen(buffer), 0);
                }
            }
            pthread_mutex_unlock(&clients_mutex);
        }
        close(client_socket);
        
        pthread_mutex_lock(&clients_mutex);
        for(int i = 0; i < num_clients; i++) {
            if(client_sockets[i] == client_socket) {
                for(int j = i; j < num_clients - 1; j++) {
                    client_sockets[j] = client_sockets[j + 1];
                }
                num_clients--;
                break;
            }
        }
        pthread_mutex_unlock(&clients_mutex);
        
        free(socket_desc);
        return NULL;
    }

    int main() {
        int server_socket = socket(AF_INET, SOCK_STREAM, 0);
        struct sockaddr_in server_addr;
        memset(&server_addr, 0, sizeof(server_addr));
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(8080);
        server_addr.sin_addr.s_addr = INADDR_ANY;
        bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr));
        listen(server_socket, 3);

        printf("Server started on port 8080\n");

        while(1) {
            int client_socket = accept(server_socket, NULL, NULL);
            if(client_socket == -1) {
                break;
            }
            pthread_mutex_lock(&clients_mutex);
            if(num_clients >= MAX_CLIENTS) {
                close(client_socket);
                pthread_mutex_unlock(&clients_mutex);
                continue;
            }
            int *new_sock = malloc(sizeof(int));
            *new_sock = client_socket;
            client_sockets[num_clients++] = client_socket;
            pthread_t thread_id;
            pthread_create(&thread_id, NULL, handle_client, (void *) new_sock);
            pthread_mutex_unlock(&clients_mutex);
        }

        close(server_socket);
        return 0;
    }
    
    