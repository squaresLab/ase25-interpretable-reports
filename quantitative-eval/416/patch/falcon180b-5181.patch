 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <pthread.h>

#define MAX 1000
#define PORT 5050
#define MAX_CLIENTS 10

int clients[MAX_CLIENTS];
int clients_count = 0;
pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;

void *handle_client(void *arg) {
    int client_socket = *(int *) arg;
    char buffer[1024];
    while (1) {
        memset(buffer, 0, sizeof(buffer));
        int bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);
        if (bytes_received <= 0) {
            break;
        }
        buffer[bytes_received] = '\0';
        printf("Client %d sent message: %s\n", client_socket, buffer);
        
        pthread_mutex_lock(&clients_mutex);
        for (int i = 0; i < clients_count; i++) {
            if (clients[i] != client_socket) {
                send(clients[i], buffer, strlen(buffer), 0);
            }
        }
        pthread_mutex_unlock(&clients_mutex);
    }
    
    pthread_mutex_lock(&clients_mutex);
    for (int i = 0; i < clients_count; i++) {
        if (clients[i] == client_socket) {
            clients[i] = 0;
            break;
        }
    }
    clients_count--;
    pthread_mutex_unlock(&clients_mutex);
    
    close(client_socket);
    free(arg);
    return NULL;
}

void broadcast(int sender_socket, char *message) {
    pthread_mutex_lock(&clients_mutex);
    for (int i = 0; i < clients_count; i++) {
        if (clients[i] != sender_socket) {
            send(clients[i], message, strlen(message), 0);
        }
    }
    pthread_mutex_unlock(&clients_mutex);
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

    bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr));
    listen(server_socket, MAX_CLIENTS);

    printf("Server started on port %d\n", PORT);

    while (1) {
        int *client_socket = malloc(sizeof(int));
        *client_socket = accept(server_socket, NULL, NULL);
        if (*client_socket == -1) {
            printf("Error accepting client\n");
            free(client_socket);
            continue;
        }
        printf("Client connected: %d\n", *client_socket);

        pthread_mutex_lock(&clients_mutex);
        for (int i = 0; i < clients_count; i++) {
            if (clients[i] == 0) {
                clients[i] = *client_socket;
                break;
            }
        }
        clients_count++;
        pthread_mutex_unlock(&clients_mutex);

        if (clients_count > MAX_CLIENTS) {
            printf("Maximum number of clients reached\n");
            close(*client_socket);
            free(client_socket);
            pthread_mutex_lock(&clients_mutex);
            clients_count--;
            pthread_mutex_unlock(&clients_mutex);
            continue;
        }

        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, (void *) client_socket);
    }

    return 0;
}

