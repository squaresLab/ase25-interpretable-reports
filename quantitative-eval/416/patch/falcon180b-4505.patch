 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>

#define PORT 8080
#define BACKLOG 10
#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

int clients[MAX_CLIENTS];
int num_clients = 0;
pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER; // Add mutex

void *handle_client(void *arg) {
    int client_socket = *(int *) arg;
    char buffer[BUFFER_SIZE];

    printf("Client connected: %d\n", client_socket);

    while(1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);

        if(bytes_received <= 0) {
            break;
        }

        printf("Received message from client %d: %s\n", client_socket, buffer);

        pthread_mutex_lock(&clients_mutex); // Lock mutex before accessing shared resource
        for(int i = 0; i < num_clients; i++) {
            if(clients[i] != client_socket) {
                send(clients[i], buffer, strlen(buffer), 0);
            }
        }
        pthread_mutex_unlock(&clients_mutex); // Unlock mutex after accessing shared resource
    }

    close(client_socket);
    printf("Client disconnected: %d\n", client_socket);

    pthread_mutex_lock(&clients_mutex); // Lock mutex before accessing shared resource
    // Remove client from array
    for(int i = 0; i < num_clients; i++) {
        if(clients[i] == client_socket) {
            for(int j = i; j < num_clients - 1; j++) {
                clients[j] = clients[j + 1];
            }
            num_clients--;
            break;
        }
    }
    pthread_mutex_unlock(&clients_mutex); // Unlock mutex after accessing shared resource
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr));
    listen(server_socket, BACKLOG);

    printf("Server started on port %d\n", PORT);

    while(1) {
        int client_socket = accept(server_socket, NULL, NULL);

        pthread_mutex_lock(&clients_mutex); // Lock mutex before accessing shared resource
        if(num_clients >= MAX_CLIENTS) {
            pthread_mutex_unlock(&clients_mutex); // Unlock mutex before closing client
            send(client_socket, "Server is full.", strlen("Server is full."), 0);
            close(client_socket);
        } else {
            clients[num_clients] = client_socket;
            num_clients++;

            pthread_mutex_unlock(&clients_mutex); // Unlock mutex after accessing shared resource

            pthread_t thread_id;
            pthread_create(&thread_id, NULL, handle_client, (void *)&client_socket);
        }
    }

    return 0;
}

