 

--- falcon180b-6044.c
+++ falcon180b-6044.c
@@ -9,6 +9,8 @@
 #include <arpa/inet.h>
 #include <pthread.h>

+#include <pthread.h>
+
 #define MAX_CLIENTS 10
 #define BUFLEN 512

@@ -16,6 +18,8 @@
 int num_clients = 0;

 void *handle_client(void *arg) {
+    pthread_mutex_t *clients_mutex = (pthread_mutex_t *)arg;
+
     int client_socket;
     memcpy(&client_socket, arg + sizeof(pthread_mutex_t), sizeof(client_socket));

     char buffer[BUFLEN];

     while (1) {
         memset(buffer, 0, BUFLEN);
         int bytes_received = recv(client_socket, buffer, BUFLEN, 0);

         if (bytes_received <= 0) {
             break;
         }

         pthread_mutex_lock(clients_mutex);
         for (int i = 0; i < num_clients; i++) {
             if (clients[i] != client_socket) {
                 send(clients[i], buffer, bytes_received, 0);
             }
         }
         pthread_mutex_unlock(clients_mutex);
     }

     close(client_socket);
     return NULL;
 }

 int main() {
+    pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;
     int server_socket = socket(AF_INET, SOCK_STREAM, 0);

     if (server_socket == -1) {
         printf("Error creating socket\n");
         return 1;
     }

     struct sockaddr_in server_addr;
     memset(&server_addr, 0, sizeof(server_addr));
     server_addr.sin_family = AF_INET;
     server_addr.sin_port = htons(8080);
     server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

     if (bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr)) == -1) {
         printf("Error binding socket\n");
         return 1;
     }

     if (listen(server_socket, MAX_CLIENTS) == -1) {
         printf("Error listening on socket\n");
         return 1;
     }

     printf("Server listening on port 8080\n");

     while (1) {
         int client_socket = accept(server_socket, NULL, NULL);

         if (client_socket == -1) {
             printf("Error accepting connection\n");
             continue;
         }

         if (num_clients >= MAX_CLIENTS) {
             send(client_socket, "Server full\n", 11, 0);
             close(client_socket);
             continue;
         }

+        pthread_mutex_lock(&clients_mutex);
         clients[num_clients] = client_socket;
         num_clients++;
+        pthread_mutex_unlock(&clients_mutex);

         pthread_t thread_id;
         void *args = malloc(sizeof(pthread_mutex_t) + sizeof(client_socket));
         memcpy(args, &clients_mutex, sizeof(pthread_mutex_t));
         memcpy(args + sizeof(pthread_mutex_t), &client_socket, sizeof(client_socket));
         pthread_create(&thread_id, NULL, handle_client, args);
     }

     return 0;
 }
 
