 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <pthread.h>

#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

typedef struct {
    int client_socket;
    int index;
} client_data;

int clients[MAX_CLIENTS];
int num_clients = 0;
pthread_mutex_t clients_lock;

void remove_client(int index) {
    pthread_mutex_lock(&clients_lock);
    close(clients[index]);
    clients[index] = -1;
    num_clients--;
    pthread_mutex_unlock(&clients_lock);
}

void *handle_client(void *arg) {
    client_data *cdata = (client_data *) arg;
    int client_socket = cdata->client_socket;
    int index = cdata->index;
    free(arg);

    char buffer[BUFFER_SIZE];

    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);

        if (bytes_received <= 0) {
            remove_client(index);
            pthread_exit(0);
        }

        printf("Client %d sent: %s\n", client_socket, buffer);
        send(client_socket, buffer, strlen(buffer), 0);
    }
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in server_addr;
    
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    
    bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr));
    listen(server_socket, 5);
    
    printf("Server started on port 8080\n");
    
    pthread_mutex_init(&clients_lock, NULL);
    
    while (1) {
        int client_socket = accept(server_socket, NULL, NULL);
        
        if (num_clients >= MAX_CLIENTS) {
            close(client_socket);
            printf("Maximum clients reached\n");
            continue;
        }

        client_data *cdata = (client_data *)malloc(sizeof(client_data));
        cdata->client_socket = client_socket;

        pthread_mutex_lock(&clients_lock);
        for (int i = 0; i < MAX_CLIENTS; i++) {
            if (clients[i] == -1) {
                clients[i] = client_socket;
                cdata->index = i;
                break;
            }
        }
        num_clients++;
        pthread_mutex_unlock(&clients_lock);
        
        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, (void *)cdata);
    }

    pthread_mutex_destroy(&clients_lock);
    return 0;
}

