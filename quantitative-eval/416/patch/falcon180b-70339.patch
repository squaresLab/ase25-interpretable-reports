 
    
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <unistd.h>
    #include <sys/socket.h>
    #include <arpa/inet.h>
    #include <pthread.h>
+   #include <semaphore.h>

    #define PORT 8080
    #define MAX_CLIENTS 10
    #define BUFFER_SIZE 1024

    int clients[MAX_CLIENTS];
    int num_clients = 0;
+   pthread_mutex_t client_mutex;

    void *thread_handler(void *arg) {
        int client_socket = *(int *) arg;
        char buffer[BUFFER_SIZE];

        while(1) {
            memset(buffer, 0, BUFFER_SIZE);
            int bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);

            if(bytes_received <= 0) {
                close(client_socket);
                break;
            }

+           pthread_mutex_lock(&client_mutex);
            for(int i=0; i<num_clients; i++) {
                if(clients[i] != client_socket) {
                    send(clients[i], buffer, strlen(buffer), 0);
                }
            }
+           pthread_mutex_unlock(&client_mutex);
        }

        return NULL;
    }

    int main() {
        int server_socket = socket(AF_INET, SOCK_STREAM, 0);
        struct sockaddr_in server_addr;

        memset(&server_addr, 0, sizeof(server_addr));
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(PORT);
        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

        bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr));
        listen(server_socket, MAX_CLIENTS);

        printf("Chat server started on port %d\n", PORT);
+       pthread_mutex_init(&client_mutex, NULL);

        while(1) {
            int client_socket = accept(server_socket, NULL, NULL);

            if(num_clients >= MAX_CLIENTS) {
                send(client_socket, "Server full\n", 12, 0);
                close(client_socket);
                continue;
            }

+           pthread_mutex_lock(&client_mutex);
            clients[num_clients++] = client_socket;
+           pthread_mutex_unlock(&client_mutex);
            pthread_t thread_id;
            pthread_create(&thread_id, NULL, thread_handler, (void *) &client_socket);
        }

+       pthread_mutex_destroy(&client_mutex);
        return 0;
    }
    
    