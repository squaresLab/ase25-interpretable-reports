 

--- gemini_pro-34590.c
+++ gemini_pro-34590.c
@@ -30,11 +30,18 @@
   pthread_cond_signal(&cond);
 
   // Release the mutex lock
   pthread_mutex_unlock(&mutex); // Correction needed
 
   return NULL;
 }
 
 int main() {
   int arr[] = {5, 1, 2, 3, 4};
   int size = sizeof(arr) / sizeof(int);
   pthread_t thread;
 
   // Initialize the mutex and condition variable
   pthread_mutex_init(&mutex, NULL);
   pthread_cond_init(&cond, NULL);
 
   // Create a thread to calculate the sum of the array
@@ -45,10 +52,21 @@
 
   // Wait for the sum to be ready
-  pthread_mutex_lock(&mutex);
-  pthread_cond_wait(&cond, &mutex);
+  pthread_mutex_lock(&mutex);         // Correction needed 
+  pthread_mutex_unlock(&mutex);       // Add unlock before waiting
+       
+  pthread_mutex_lock(&mutex);         
+  while (sum == 0) {                  // Correction needed: confirm changes 
+    pthread_cond_wait(&cond, &mutex); // Resume wait logic 
+  }
+  pthread_mutex_unlock(&mutex);
 
   // Print the sum of the array
   printf("The sum of the array is: %d\n", sum);

   // Destroy the mutex and condition variable
   pthread_mutex_destroy(&mutex);
   pthread_cond_destroy(&cond);

   return 0;
 
