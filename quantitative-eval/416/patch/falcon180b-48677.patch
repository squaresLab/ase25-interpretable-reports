 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <pthread.h>

#define MAX_CLIENTS 50
#define BUFFER_SIZE 1024

int clients[MAX_CLIENTS];
int num_clients = 0;
int max_clients = MAX_CLIENTS;

void *handle_client(void *arg) {
    int client_socket = *(int *) arg;
    char buffer[BUFFER_SIZE];

    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);

        if (bytes_received <= 0) {
            break;
        }

        for (int i = 0; i < num_clients; i++) {
            if (clients[i] != client_socket) {
                send(clients[i], buffer, strlen(buffer), 0);
            }
        }
    }

    close(client_socket);
    return NULL;
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

    bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr));
    listen(server_socket, 10);

    printf("Chat server started on port 8080\n");

    while (1) {
        int client_socket = accept(server_socket, NULL, NULL);

        // Check if we're at the maximum number of clients
        if (num_clients >= max_clients) {
            send(client_socket, "Server is full. Please try again later.\n", 46, 0);
            close(client_socket);
            continue;
        }

        clients[num_clients] = client_socket;
        num_clients++;

        pthread_t thread_id;
        int *client_sock = malloc(sizeof(int));  // Allocate memory for client socket
        if (client_sock == NULL) {
            perror("Failed to allocate memory");
            close(client_socket);
            continue;
        }
        *client_sock = client_socket;  // Store the accepted client socket
        pthread_create(&thread_id, NULL, handle_client, (void *) client_sock);
        pthread_detach(thread_id);  // Detach thread to free resources when done
    }

    close(server_socket);  // Close server socket before exiting
    return 0;
}


