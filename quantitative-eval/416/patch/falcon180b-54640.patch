 
    
    --- falcon180b-54640.c     2023-10-10
    +++ falcon180b-54640-fixed.c     2023-10-11
    @@ -14,7 +14,7 @@
    void *handle_client(void *arg) {
        int client_socket = *(int *)arg;
        char buffer[BUFFER_SIZE];
     
    +    int bytes_received;
        while (1) {
            memset(buffer, 0, BUFFER_SIZE);
    -        int bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);
    +        bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);
     
            if (bytes_received <= 0) {
                break;
            }
    @@ -31,7 +31,10 @@
    int main() {
        int server_socket = socket(AF_INET, SOCK_STREAM, 0);
     
    +    struct sockaddr_in server_addr;
        memset(&server_addr, 0, sizeof(server_addr));
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(8080);
        server_addr.sin_addr.s_addr = INADDR_ANY;
     
    -    bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr));
    +    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
    +        perror("bind failed");
    +        exit(EXIT_FAILURE);
    +    }

    @@ -45,13 +48,15 @@
     
        printf("Server is running on port 8080\n");
     
    -    while (1) {
    -        int client_socket = accept(server_socket, NULL, NULL);
    +    while (num_clients < MAX_CLIENTS) {
    +        int *client_socket = malloc(sizeof(int));
    +        *client_socket = accept(server_socket, NULL, NULL);
     
    -        if (num_clients >= MAX_CLIENTS) {
    +        if (*client_socket < 0) {
    +            perror("accept failed");
                printf("Maximum number of clients reached\n");
    -            close(client_socket);
    +            free(client_socket);
                continue;
            }
     
    -        client_sockets[num_clients] = client_socket;
    -        num_clients++;
    +        client_sockets[num_clients++] = *client_socket;
     
    -        pthread_t thread_id;
    -        pthread_create(&thread_id, NULL, handle_client, (void *)&client_socket);
    +        pthread_t thread_id;
    +        pthread_create(&thread_id, NULL, handle_client, client_socket);
    +    +    pthread_detach(thread_id);
        }
     
        return 0;
    }
    

    