""" Command Line Interface Module. """

import argparse
import os
import pathlib

from secgenlint.main import main as secgenlint

def main():
    dir = os.path.dirname(os.path.abspath(__file__))
    version = {}
    with open(os.path.join(dir, "version.py")) as fp:
        exec(fp.read(), version)

    cli = CLI(version['__version__'])
    cli.config()
    cli.run()

class CLI:
    """ Class for wrapping the CLI interface.
    
    Attributes:
        args: command line arguments
        version: secgenlint version
    """
    def __init__(self, version):
        self.args = None
        self.version = version
        self.config()

    def config(self):
        parser = argparse.ArgumentParser(description='A linter to measure compliance against [SECGEN](https://github.com/TQRG/secgen) convention.')
        parser.add_argument('--version', '-v', action='version', version='%(prog)s {}'.format(self.version))
        parser.add_argument('--input-file', '-i', action='store', required=True, help="Vulnerable report generated by SECGEN", type=pathlib.Path)
        parser.add_argument('--output-file', '-o', action='store', required=True, help="Output file", type=pathlib.Path)
        parser.add_argument('--show-score', '-s',  help='Show compliance score (default: true)', type=bool, default=True)
        parser.add_argument('--quiet', '-q',  help='Display only compliance errors and warnings (default: false)', type=bool, default=False)
        self.args = parser.parse_args()

    def run(self):
        input_file: str  = self.args.input_file.as_posix()
        output_file: str = self.args.output_file.as_posix()
        show_score: bool = self.args.show_score
        quiet: bool = self.args.quiet

        secgenlint(report=input_file, out=output_file, show_score=show_score, quiet=quiet)
